@page "/units/new"
@using Gatekeeper.Frontend.Admin.Dtos
@using Gatekeeper.Frontend.Admin.Services
@using Gatekeeper.Frontend.Admin.Validations
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject UnitFormValidator UnitFormValidator
@inject UnitService UnitService


<PageTitle>Unit</PageTitle>


<MudText Typo="Typo.h2">New Unit</MudText>
<MudPaper Class="pa-4">
    <MudForm Model="@Form" @ref="@MudForm" Validation="@(UnitFormValidator.ValidateValue)" ValidationDelay="0">
        <MudTextField 
            T="string" 
            @bind-value="Form.Identifier" 
            Label="Identifier"
            For="@(() => Form.Identifier)"
            Required="true" 
            RequiredError="Identifier is required!"/>
       
        <MudButton Color="Color.Primary" OnClick="@(async () => await SaveUnit())">Save</MudButton>
    </MudForm>
</MudPaper>


@code {
    MudForm MudForm;

    public UnitForm Form = new();

    private async Task SaveUnit()
    {
        await MudForm.Validate();

        if (!MudForm.IsValid)
        {
            Snackbar.Add("Form is invalid", Severity.Error);
            return;
        }
        
        var isSuccessful = await UnitService.SaveAsync(Form);

        if (isSuccessful)
        {
            Snackbar.Add("Unit saved", Severity.Success);
            NavigationManager.NavigateTo("/units");
        }
        else
        {
            Snackbar.Add("Error saving unit", Severity.Error);
        }
        
    }

}
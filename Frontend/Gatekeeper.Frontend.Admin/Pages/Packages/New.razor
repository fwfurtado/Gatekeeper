@page "/packages/new"
@using Gatekeeper.Frontend.Admin.Dtos
@using Gatekeeper.Frontend.Admin.Services
@using Gatekeeper.Frontend.Admin.Validations
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject PackageFormValidator PackageFormValidator
@inject PackageService PackageService
@inject UnitService UnitService


<PageTitle>Package</PageTitle>


<MudText Typo="Typo.h2">New Package</MudText>
<MudPaper Class="pa-4">
    <MudForm Model="@Form" @ref="@MudForm" Validation="@(PackageFormValidator.ValidateValue)" ValidationDelay="0">
        <MudTextField
            T="string"
            Placeholder="Description"
            @bind-value="Form.Description"
                      Label="Description"
                      For="@(() => Form.Description)"
            Immediate="true"/>

        <MudAutocomplete T="UnitResponse" Label="Unit" @bind-Value="_selectedUnit" SearchFunc="@SearchUnit" ToStringFunc="@(u => u.Identifier)" />

        <MudButton Color="Color.Primary" OnClick="@(async () => await SavePackage())">Save</MudButton>
    </MudForm>
</MudPaper>


@code {
    MudForm MudForm;

    public PackageForm Form = new();
    private UnitResponse _selectedUnit;

    private async Task SavePackage()
    {
        Form.UnitId = _selectedUnit.Id;

        await MudForm.Validate();

        if (!MudForm.IsValid)
        {
            Snackbar.Add("Form is invalid", Severity.Error);
            return;
        }

        var isSuccessful = await PackageService.SaveAsync(Form);

        if (isSuccessful)
        {
            Snackbar.Add("Package saved", Severity.Success);
            NavigationManager.NavigateTo("/packages");
        }
        else
        {
            Snackbar.Add("Error saving package", Severity.Error);
        }
    }

    private async Task<IEnumerable<UnitResponse>> SearchUnit(string text)
    { 
        return await UnitService.FilterByIdentifierAsync(text);
    }

}
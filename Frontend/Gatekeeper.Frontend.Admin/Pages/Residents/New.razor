@page "/residents/new"
@using Gatekeeper.Frontend.Admin.Dtos
@using Gatekeeper.Frontend.Admin.Services
@using Gatekeeper.Frontend.Admin.Validations

@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ResidentFormValidator ResidentFormValidator
@inject ResidentService ResidentService


<PageTitle>Resident</PageTitle>


<MudText Typo="Typo.h2">New Resident</MudText>
<MudPaper Class="pa-4">
    <MudForm Model="@Form" @ref="@MudForm" Validation="@(ResidentFormValidator.ValidateValue)" ValidationDelay="0">
        <MudTextField
            T="string"
            Placeholder="John Doe"
            @bind-value="Form.Name"
            Label="Name"
            For="@(() => Form.Name)"
            Immediate="true"/>

        <MudTextField
            T="string"
            Placeholder="@CpfMask.Mask"
            @bind-value="Form.Document"
            Mask="@CpfMask" Label="Document"
            For="@(() => Form.Document)"
            Immediate="true"/>

        <MudButton Color="Color.Primary" OnClick="@(async () => await SaveResident())">Save</MudButton>
    </MudForm>
</MudPaper>


@code {
    MudForm MudForm;
    
    public ResidentForm Form = new();

    public PatternMask CpfMask = new("000.000.000-00")
    {
        CleanDelimiters = true
    };

    private async Task SaveResident()
    {
        await MudForm.Validate();
        
        if (!MudForm.IsValid)
        {
            Snackbar.Add("Form is invalid", Severity.Error);
            return;
        }
        
        var isSuccessful = await ResidentService.SaveAsync(Form);

        if (isSuccessful)
        {
            Snackbar.Add("Resident saved", Severity.Success);
            NavigationManager.NavigateTo("/residents");
        }
        else
        {
            Snackbar.Add("Error saving resident", Severity.Error);
        }
    }

}
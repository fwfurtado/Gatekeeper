@page "/residents/"
@using Gatekeeper.Frontend.Admin.Dtos

@inject HttpClient Http

<PageTitle>Resident</PageTitle>

@if (_resident == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}
else
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mb-4" Link="true" Href="/residents/new">Create</MudButton>
    <MudTable Items="_resident" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ResidentResponse, object>(x => x.Id)">#</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ResidentResponse, object>(x => x.Name)">Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ResidentResponse, object>(x => x.Document)">Document</MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Document">@context.Document</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 50 }"/>
        </PagerContent>
    </MudTable>
}

@code {

    private ResidentResponse[]? _resident;


    protected override async Task OnInitializedAsync()
    {
        _resident = await Http.GetFromJsonAsync<ResidentResponse[]>("residents");
    }

}

